replicaCount: 1

image:
  repository: [YOUR GCR IMAGE]
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""
env:
imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""
containerPort: 8080
serviceAccount:
  create: true
  automount: true
  name: [YOUR SERVICE ACCOUNT NAME]
  annotations:
    iam.gke.io/gcp-service-account: [YOUR SERVICE ACCOUNT EMAIL]

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: NodePort
  httpPort: 80
  httpTargetPort: 8080
  annotations:
    beta.cloud.google.com/backend-config: '{"default": [YOUR BACKEND CONFIG NAME]}'

ingress:
  annotations:
    kubernetes.io/ingress.class: "gce"
    kubernetes.io/ingress.global-static-ip-name: [YOUR STATIC IP NAME]
    networking.gke.io/managed-certificates: [YOUR CERT NAME]

  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

livenessProbe:
  httpGet:
    path: /actuator/health
    port: http
  initialDelaySeconds: 60
  periodSeconds: 30
  timeoutSeconds: 5
  failureThreshold: 3
readinessProbe:
  httpGet:
    path: /actuator/health
    port: http
  initialDelaySeconds: 10
  periodSeconds: 5
  timeoutSeconds: 3
  failureThreshold: 3
  successThreshold: 1
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
